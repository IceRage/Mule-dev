.TH "multiscale::video::PolarCsvToInputFilesConverter" 3 "Sun Mar 17 2013" "Version 0.0.1" "Multiscale" \" -*- nroff -*-
.ad l
.nh
.SH NAME
multiscale::video::PolarCsvToInputFilesConverter \- 
.PP
Csv file to input file converter considering polar coordinates\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PolarCsvToInputFilesConverter\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPolarCsvToInputFilesConverter\fP (const string &\fBinputFilepath\fP, const string &\fBoutputFilepath\fP, unsigned int \fBnrOfConcentricCircles\fP, unsigned int \fBnrOfSectors\fP, unsigned int \fBnrOfConcentrationsForPosition\fP, unsigned int \fBselectedConcentrationIndex\fP, \fBNumberIteratorType\fP numberIteratorType)"
.br
.ti -1c
.RI "\fB~PolarCsvToInputFilesConverter\fP ()"
.br
.ti -1c
.RI "void \fBconvert\fP ()"
.br
.RI "\fIStart the conversion\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitInputFile\fP (ifstream &fin)"
.br
.RI "\fIInitialise the input file stream over the given input file\&. \fP"
.ti -1c
.RI "void \fBinitMaximumConcentration\fP (ifstream &fin)"
.br
.RI "\fICompute the value of member maximum concentration\&. \fP"
.ti -1c
.RI "void \fBinitOutputFile\fP (ofstream &fout, unsigned int index, double &simulationTime)"
.br
.RI "\fIInitialise the output file with the given index and simulation time\&. \fP"
.ti -1c
.RI "void \fBinitIterators\fP (const \fBNumberIteratorType\fP &numberIteratorType)"
.br
.RI "\fIInitialise the iterators considering the given number iterator type\&. \fP"
.ti -1c
.RI "void \fBvalidateSelectedConcentrationIndex\fP ()"
.br
.RI "\fIValidate the selected concentration index in case of more than one concentration for each position\&. \fP"
.ti -1c
.RI "void \fBvalidateInput\fP (ifstream &fin)"
.br
.RI "\fIValidate the input\&. \fP"
.ti -1c
.RI "void \fBvalidateInputLine\fP (const string &line, unsigned int lineNumber)"
.br
.RI "\fIValidate the provided line identified by a line number\&. \fP"
.ti -1c
.RI "void \fBprocessInputFile\fP (ifstream &fin)"
.br
.RI "\fIProcess the input file\&. \fP"
.ti -1c
.RI "void \fBprocessLine\fP (const string &line, unsigned int outputIndex)"
.br
.RI "\fIProcess the provided line\&. \fP"
.ti -1c
.RI "vector< double > \fBsplitLineInConcentrations\fP (const string &line, double &simulationTime)"
.br
.RI "\fISplit the line in concentrations\&. \fP"
.ti -1c
.RI "void \fBsplitFirstPartInConcentrations\fP (vector< double > &concentrations, const vector< string > &tokens, unsigned int circleIndex)"
.br
.RI "\fISplit first part of the line (i\&.e\&. part representing the origin) into concentrations\&. \fP"
.ti -1c
.RI "void \fBsplitOtherPartsInConcentrations\fP (vector< double > &concentrations, const vector< string > &tokens, unsigned int circleIndex)"
.br
.RI "\fISplit other parts of the line (i\&.e\&. non-first part) into concentrations\&. \fP"
.ti -1c
.RI "double \fBcomputeSimulationTime\fP (const string &token)"
.br
.RI "\fICompute the simulation time from the given token and check if it is valid\&. \fP"
.ti -1c
.RI "double \fBcomputeNextPositionConcentration\fP (unsigned int circleIndex, int concentrationIndex, const vector< string > &tokens)"
.br
.RI "\fICompute the concentration for the next position\&. \fP"
.ti -1c
.RI "double \fBcomputeConcentration\fP (const string &concentration, int circleIndex)"
.br
.RI "\fICompute the concentration from the given string considering the index of the current concentric circle\&. \fP"
.ti -1c
.RI "double \fBcomputeNonScaledConcentration\fP (const string &concentration, int circleIndex)"
.br
.RI "\fICompute the non-scaled concentration from the given string considering the index of the current concentric circle\&. \fP"
.ti -1c
.RI "double \fBcomputeScaledConcentration\fP (const string &concentration, int circleIndex)"
.br
.RI "\fICompute the scaled concentration from the given string considering the index of the current concentric circle\&. \fP"
.ti -1c
.RI "double \fBcomputeConcentrationWrtArea\fP (double amount, int circleIndex)"
.br
.RI "\fICompute the concentration wrt\&. the area of the annular sector\&. \fP"
.ti -1c
.RI "double \fBcomputeNormalisedConcentration\fP (double concentration, int circleIndex)"
.br
.RI "\fINormalise the concentration considering the index of the current concentric circle by dividing it to the maximum concentration\&. \fP"
.ti -1c
.RI "void \fBupdateMaximumConcentration\fP (const string &line, double &\fBmaximumConcentration\fP)"
.br
.RI "\fIUpdate the maximum concentration if the values from the given line are greater than it\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "string \fBinputFilepath\fP"
.br
.ti -1c
.RI "string \fBoutputFilepath\fP"
.br
.ti -1c
.RI "unsigned int \fBnrOfConcentricCircles\fP"
.br
.ti -1c
.RI "unsigned int \fBnrOfSectors\fP"
.br
.ti -1c
.RI "unsigned int \fBnrOfConcentrationsForPosition\fP"
.br
.ti -1c
.RI "unsigned int \fBconcentrationsIndex\fP"
.br
.ti -1c
.RI "unsigned int \fBselectedConcentrationIndex\fP"
.br
.ti -1c
.RI "double \fBmaximumConcentration\fP"
.br
.ti -1c
.RI "\fBNumberIterator\fP * \fBcirclesIterator\fP"
.br
.ti -1c
.RI "\fBNumberIterator\fP * \fBsectorsIterator\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Csv file to input file converter considering polar coordinates\&. 
.PP
Definition at line 32 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "multiscale::video::PolarCsvToInputFilesConverter::PolarCsvToInputFilesConverter (const string &inputFilepath, const string &outputFilepath, unsigned intnrOfConcentricCircles, unsigned intnrOfSectors, unsigned intnrOfConcentrationsForPosition, unsigned intselectedConcentrationIndex, \fBNumberIteratorType\fPnumberIteratorType)"

.SS "multiscale::video::PolarCsvToInputFilesConverter::~PolarCsvToInputFilesConverter ()"

.SH "Member Function Documentation"
.PP 
.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeConcentration (const string &concentration, intcircleIndex)\fC [private]\fP"

.PP
Compute the concentration from the given string considering the index of the current concentric circle\&. \fBParameters:\fP
.RS 4
\fIconcentration\fP String representing the concentration 
.br
\fIcircleIndex\fP Index of the concentric circle 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeConcentrationWrtArea (doubleamount, intcircleIndex)\fC [private]\fP"

.PP
Compute the concentration wrt\&. the area of the annular sector\&. \fBParameters:\fP
.RS 4
\fIamount\fP Amount in annular sector 
.br
\fIcircleIndex\fP Index of the concentric circle which will be used to determine the area 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeNextPositionConcentration (unsigned intcircleIndex, intconcentrationIndex, const vector< string > &tokens)\fC [private]\fP"

.PP
Compute the concentration for the next position\&. \fBParameters:\fP
.RS 4
\fIcircleIndex\fP Index of the current concentric circle 
.br
\fIconcentrationIndex\fP Index of the current concentration from the vector of tokens 
.br
\fItokens\fP Vector of tokens 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeNonScaledConcentration (const string &concentration, intcircleIndex)\fC [private]\fP"

.PP
Compute the non-scaled concentration from the given string considering the index of the current concentric circle\&. \fBParameters:\fP
.RS 4
\fIconcentration\fP String representing the concentration 
.br
\fIcircleIndex\fP Index of the concentric circle 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeNormalisedConcentration (doubleconcentration, intcircleIndex)\fC [private]\fP"

.PP
Normalise the concentration considering the index of the current concentric circle by dividing it to the maximum concentration\&. \fBParameters:\fP
.RS 4
\fIconcentration\fP The concentration 
.br
\fIcircleIndex\fP Index of the concentric circle 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeScaledConcentration (const string &concentration, intcircleIndex)\fC [private]\fP"

.PP
Compute the scaled concentration from the given string considering the index of the current concentric circle\&. Compute the scaled concentration from the given string by applying a logit transformation to it
.PP
\fBParameters:\fP
.RS 4
\fIconcentration\fP String representing the concentration 
.br
\fIcircleIndex\fP Index of the concentric circle 
.RE
.PP

.SS "double multiscale::video::PolarCsvToInputFilesConverter::computeSimulationTime (const string &token)\fC [private]\fP"

.PP
Compute the simulation time from the given token and check if it is valid\&. \fBParameters:\fP
.RS 4
\fItoken\fP Token (string) 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::convert ()"

.PP
Start the conversion\&. 
.SS "void multiscale::video::PolarCsvToInputFilesConverter::initInputFile (ifstream &fin)\fC [private]\fP"

.PP
Initialise the input file stream over the given input file\&. \fBParameters:\fP
.RS 4
\fIfin\fP Input file stream 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::initIterators (const \fBNumberIteratorType\fP &numberIteratorType)\fC [private]\fP"

.PP
Initialise the iterators considering the given number iterator type\&. \fBParameters:\fP
.RS 4
\fInumberIteratorType\fP The type of the number iterator 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::initMaximumConcentration (ifstream &fin)\fC [private]\fP"

.PP
Compute the value of member maximum concentration\&. \fBParameters:\fP
.RS 4
\fIfin\fP Input file stream 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::initOutputFile (ofstream &fout, unsigned intindex, double &simulationTime)\fC [private]\fP"

.PP
Initialise the output file with the given index and simulation time\&. \fBParameters:\fP
.RS 4
\fIfout\fP Output file stream 
.br
\fIindex\fP Index of the output file 
.br
\fIsimulationTime\fP Simulation time 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::processInputFile (ifstream &fin)\fC [private]\fP"

.PP
Process the input file\&. Read the concentrations and normalise them if it is the case\&.
.PP
\fBParameters:\fP
.RS 4
\fIfin\fP Input file stream 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::processLine (const string &line, unsigned intoutputIndex)\fC [private]\fP"

.PP
Process the provided line\&. \fBParameters:\fP
.RS 4
\fIline\fP Line 
.br
\fIoutputIndex\fP Index integrated in the name of the output file 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::splitFirstPartInConcentrations (vector< double > &concentrations, const vector< string > &tokens, unsigned intcircleIndex)\fC [private]\fP"

.PP
Split first part of the line (i\&.e\&. part representing the origin) into concentrations\&. \fBParameters:\fP
.RS 4
\fIconcentrations\fP Concentrations extracted from tokens 
.br
\fItokens\fP Tokens representing the line 
.br
\fIcircleIndex\fP Index of the current concentric circle 
.RE
.PP

.SS "vector<double> multiscale::video::PolarCsvToInputFilesConverter::splitLineInConcentrations (const string &line, double &simulationTime)\fC [private]\fP"

.PP
Split the line in concentrations\&. \fBParameters:\fP
.RS 4
\fIline\fP Line 
.br
\fIsimulationTime\fP Simulation time associated with the line 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::splitOtherPartsInConcentrations (vector< double > &concentrations, const vector< string > &tokens, unsigned intcircleIndex)\fC [private]\fP"

.PP
Split other parts of the line (i\&.e\&. non-first part) into concentrations\&. \fBParameters:\fP
.RS 4
\fIconcentrations\fP Concentrations extracted from tokens 
.br
\fItokens\fP Tokens representing the line 
.br
\fIcircleIndex\fP Index of the current concentric circle 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::updateMaximumConcentration (const string &line, double &maximumConcentration)\fC [private]\fP"

.PP
Update the maximum concentration if the values from the given line are greater than it\&. \fBParameters:\fP
.RS 4
\fIline\fP Line from input file 
.br
\fImaximumConcentration\fP The maximum concentration 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::validateInput (ifstream &fin)\fC [private]\fP"

.PP
Validate the input\&. \fBParameters:\fP
.RS 4
\fIfin\fP Input file stream 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::validateInputLine (const string &line, unsigned intlineNumber)\fC [private]\fP"

.PP
Validate the provided line identified by a line number\&. \fBParameters:\fP
.RS 4
\fIline\fP Line from input file 
.br
\fIlineNumber\fP Number of the line 
.RE
.PP

.SS "void multiscale::video::PolarCsvToInputFilesConverter::validateSelectedConcentrationIndex ()\fC [private]\fP"

.PP
Validate the selected concentration index in case of more than one concentration for each position\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBNumberIterator\fP* multiscale::video::PolarCsvToInputFilesConverter::circlesIterator\fC [private]\fP"
Iterator over the number of concentric circles 
.PP
Definition at line 54 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "unsigned int multiscale::video::PolarCsvToInputFilesConverter::concentrationsIndex\fC [private]\fP"
Index of the current concentration 
.PP
Definition at line 43 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "string multiscale::video::PolarCsvToInputFilesConverter::inputFilepath\fC [private]\fP"
Path to the input file 
.PP
Definition at line 36 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "double multiscale::video::PolarCsvToInputFilesConverter::maximumConcentration\fC [private]\fP"
The maximum concentration in the input file 
.PP
Definition at line 52 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "unsigned int multiscale::video::PolarCsvToInputFilesConverter::nrOfConcentrationsForPosition\fC [private]\fP"
Number of concentrations for each position 
.PP
Definition at line 41 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "unsigned int multiscale::video::PolarCsvToInputFilesConverter::nrOfConcentricCircles\fC [private]\fP"
Number of concentric circles 
.PP
Definition at line 39 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "unsigned int multiscale::video::PolarCsvToInputFilesConverter::nrOfSectors\fC [private]\fP"
Number of sectors 
.PP
Definition at line 40 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "string multiscale::video::PolarCsvToInputFilesConverter::outputFilepath\fC [private]\fP"
Path to the output file 
.PP
Definition at line 37 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "\fBNumberIterator\fP* multiscale::video::PolarCsvToInputFilesConverter::sectorsIterator\fC [private]\fP"
Iterator over the number of sectors 
.PP
Definition at line 55 of file PolarCsvToInputFilesConverter\&.hpp\&.
.SS "unsigned int multiscale::video::PolarCsvToInputFilesConverter::selectedConcentrationIndex\fC [private]\fP"
.PP
.nf
    Index of the concentration A in case the number of
.fi
.PP
 concentrations for each position is greater than 1
.PP
finalConcentration = A / (A1 + A2 + \&.\&.\&. + AN), where N is the number of concentrations for each position 
.PP
Definition at line 45 of file PolarCsvToInputFilesConverter\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Multiscale from the source code\&.
