#include "multiscale/util/StringManipulator.hpp"
#include "multiscale/verification/spatial-temporal/data/SpatialTemporalDataWriter.hpp"

using namespace multiscale;
using namespace multiscale::verification;


void SpatialTemporalDataWriter::outputTraceInXmlFormatToFile(const SpatialTemporalTrace &trace,
                                                             const std::string &outputFilepath) {
    pt::ptree propertyTree;

    addAutoGeneratedCommentToPropertyTree(propertyTree);
    constructPropertyTreeFromTrace(trace, propertyTree);
    outputPropertyTreeInXmlFormatToFile(propertyTree, outputFilepath);
}

void SpatialTemporalDataWriter::addAutoGeneratedCommentToPropertyTree(pt::ptree &propertyTree) {
    propertyTree.add(LABEL_COMMENT, CONTENTS_COMMENT_AUTO_GENERATED);
}

void SpatialTemporalDataWriter::constructPropertyTreeFromTrace(const SpatialTemporalTrace &trace,
                                                               pt::ptree &propertyTree) {
    pt::ptree experimentPropertyTree;

    // Add time points to the experiment tree
    addTimePointsToExperimentPropertyTree(trace, experimentPropertyTree);

    // Add the experiment tree to the property tree
    propertyTree.add_child(LABEL_EXPERIMENT, experimentPropertyTree);
}

void SpatialTemporalDataWriter::addTimePointsToExperimentPropertyTree(const SpatialTemporalTrace &trace,
                                                                      pt::ptree &experimentPropertyTree) {
    unsigned int nrOfTimePoints = trace.length();

    // Add each time point to the experiment property tree
    for (unsigned int i = 0; i < nrOfTimePoints; i++) {
        // Construct time point property tree
        pt::ptree timePointPropertyTree
            = constructPropertyTreeFromTimePoint(trace.getTimePointReference(i));

        // Add the time point to the experiment property tree
        experimentPropertyTree.add_child(LABEL_TIMEPOINT, timePointPropertyTree);
    }
}

pt::ptree SpatialTemporalDataWriter::constructPropertyTreeFromTimePoint(const TimePoint &timePoint) {
    pt::ptree timePointTree;

    addValueAttributeToTimePointTree(timePoint, timePointTree);
    addSpatialEntitiesToTimePointTree(timePoint, timePointTree);
    addNumericStateVariablesToTimePointTree(timePoint, timePointTree);

    return timePointTree;
}

void SpatialTemporalDataWriter::addValueAttributeToTimePointTree(const TimePoint &timePoint,
                                                                 pt::ptree &timePointTree) {
    // Create the value attribute tree
    addAttributeToTree(
        LABEL_TIMEPOINT_VALUE_ATTRIBUTE,
        StringManipulator::toString(timePoint.getValue()),
        timePointTree
    );
}

void SpatialTemporalDataWriter::addSpatialEntitiesToTimePointTree(const TimePoint &timePoint,
                                                                  pt::ptree &timePointTree) {
    // Add spatial entities of each type to the time point tree
    for (std::size_t i = 0; i < NR_SUBSET_SPECIFIC_TYPES; i++) {
        addSpatialEntitiesOfSpecificTypeToTimePointTree(i, timePoint, timePointTree);
    }
}

void SpatialTemporalDataWriter::addSpatialEntitiesOfSpecificTypeToTimePointTree(const std::size_t &spatialEntitiesType,
                                                                                const TimePoint &timePoint,
                                                                                pt::ptree &timePointTree) {
    // Obtain references to the spatial entities begin and end iterators
    auto beginIterator  = timePoint.getSpatialEntitiesBeginIterator(spatialEntitiesType);
    auto endIterator    = timePoint.getSpatialEntitiesEndIterator(spatialEntitiesType);

    // Add spatial entities of the given type to the time point tree
    for (auto it = beginIterator; it != endIterator; it++) {
        addSpatialEntityOfSpecificTypeToTimePointTree(
            subsetspecific::toString(spatialEntitiesType),      // Spatial entity type
            (*it),                                              // Shared pointer to spatial entity
            timePointTree
        );
    }
}

void SpatialTemporalDataWriter::addSpatialEntityOfSpecificTypeToTimePointTree(const std::string &spatialEntityType,
                                                                              const std::shared_ptr<SpatialEntity>
                                                                              &spatialEntity,
                                                                              pt::ptree &timePointTree) {
    pt::ptree spatialEntityTree;

    addSpatialTypeAttributeToTree(
        spatialEntityType,
        spatialEntityTree
    );
    addScaleAndSubsystemAttributeToTree(
        spatialEntity->getScaleAndSubsystem(),
        spatialEntityTree
    );

    // Add the spatial measures values to the spatial entity tree
    addSpatialMeasuresValuesToTree(spatialEntity, spatialEntityTree);

    // Add the spatial entity tree to the time point tree
    timePointTree.add_child(LABEL_SPATIAL_ENTITY, spatialEntityTree);
}

void SpatialTemporalDataWriter::addNumericStateVariablesToTimePointTree(const TimePoint &timePoint,
                                                                        pt::ptree &timePointTree) {
    // Get references to the begin and end iterators
    auto beginIterator  = timePoint.getNumericStateVariablesBeginIterator();
    auto endIterator    = timePoint.getNumericStateVariablesEndIterator();

    // Add each numeric state variable to the time point tree
    for (auto it = beginIterator; it != endIterator; it++) {
        pt::ptree numericStateVariableTree
            = constructPropertyTreeFromNumericStateVariable(
                  it->first,        // Numeric state variable id
                  it->second        // Numeric state variable value
              );

        // Construct and add the numeric state variable tree to the time point tree
        timePointTree.add_child(LABEL_NUMERIC_STATE_VARIABLE, numericStateVariableTree);
    }
}

pt::ptree SpatialTemporalDataWriter::constructPropertyTreeFromNumericStateVariable(const NumericStateVariableId
                                                                                   &numericStateVariableId,
                                                                                   double numericStateVariableValue) {
    pt::ptree numericStateVariableTree;

    addScaleAndSubsystemAttributeToTree(
        numericStateVariableId.getScaleAndSubsystem(),
        numericStateVariableTree
    );

    // Add the name and value of the numeric state variable to the tree
    numericStateVariableTree.add(LABEL_NUMERIC_STATE_VARIABLE_NAME, numericStateVariableId.getName());
    numericStateVariableTree.add(LABEL_NUMERIC_STATE_VARIABLE_VALUE, numericStateVariableValue);

    return numericStateVariableTree;
}

void SpatialTemporalDataWriter::addSpatialTypeAttributeToTree(const std::string &spatialType,
                                                              pt::ptree &propertyTree) {
    addAttributeToTree(
        LABEL_SPATIAL_TYPE_ATTRIBUTE,
        spatialType,
        propertyTree
    );
}

void SpatialTemporalDataWriter::addScaleAndSubsystemAttributeToTree(const std::string &scaleAndSubsystem,
                                                                    pt::ptree &propertyTree) {
    // If the scale and subsystem is not empty then add it as an attribute to the property tree
    // Otherwise do not add any attribute to the property tree. This is possible because the
    // scale and subsystem attribute is optional.
    if (!scaleAndSubsystem.empty()) {
        addAttributeToTree(
            LABEL_SCALE_AND_SUBSYSTEM_ATTRIBUTE,
            scaleAndSubsystem,
            propertyTree
        );
    }
}

void SpatialTemporalDataWriter::addAttributeToTree(const std::string &attributeName,
                                                   const std::string &attributeValue,
                                                   pt::ptree &propertyTree) {
    // Add the attribute to the property tree
    propertyTree.put(
        LABEL_ATTRIBUTE + LABEL_ATTRIBUTE_SEPARATOR + attributeName,
        attributeValue
    );
}

void SpatialTemporalDataWriter::outputPropertyTreeInXmlFormatToFile(const pt::ptree &propertyTree,
                                                                    const std::string &outputFilepath) {
    // Pretty writing of the property tree to the file
    pt::xml_writer_settings<char> settings('\t', 1);

    write_xml(outputFilepath, propertyTree, std::locale(), settings);
}


// Constants
const std::string SpatialTemporalDataWriter::LABEL_ATTRIBUTE            = "<xmlattr>";
const std::string SpatialTemporalDataWriter::LABEL_ATTRIBUTE_SEPARATOR  = ".";
const std::string SpatialTemporalDataWriter::LABEL_COMMENT              = "<xmlcomment>";

const std::string SpatialTemporalDataWriter::LABEL_EXPERIMENT               = "experiment";
const std::string SpatialTemporalDataWriter::LABEL_TIMEPOINT                = "timepoint";
const std::string SpatialTemporalDataWriter::LABEL_NUMERIC_STATE_VARIABLE   = "numericStateVariable";
const std::string SpatialTemporalDataWriter::LABEL_SPATIAL_ENTITY           = "spatialEntity";

const std::string SpatialTemporalDataWriter::LABEL_TIMEPOINT_VALUE_ATTRIBUTE        = "value";
const std::string SpatialTemporalDataWriter::LABEL_SPATIAL_TYPE_ATTRIBUTE           = "spatialType";
const std::string SpatialTemporalDataWriter::LABEL_SCALE_AND_SUBSYSTEM_ATTRIBUTE    = "scaleAndSubsystem";

const std::string SpatialTemporalDataWriter::LABEL_NUMERIC_STATE_VARIABLE_NAME  = "name";
const std::string SpatialTemporalDataWriter::LABEL_NUMERIC_STATE_VARIABLE_VALUE = "value";

const std::string SpatialTemporalDataWriter::CONTENTS_COMMENT_AUTO_GENERATED    = "Warning! This xml file was automatically generated by a C++ program using the Boost PropertyTree library.";
