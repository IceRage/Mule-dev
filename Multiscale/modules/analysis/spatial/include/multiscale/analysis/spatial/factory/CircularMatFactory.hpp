#ifndef CIRCULARMATFACTORY_HPP
#define CIRCULARMATFACTORY_HPP

#include "multiscale/analysis/spatial/MatFactory.hpp"


namespace multiscale {

    namespace analysis {

        //! Class for creating a Mat object considering a circular grid
        class CircularMatFactory : public MatFactory {

            public:

                CircularMatFactory();
                ~CircularMatFactory();

                //! Create a Mat object from the image file obtained from the CircularGeometryViewer
                /*!
                 * Create the Mat instance from the given image file
                 *
                 *  \param inputFile The path to the image file
                 */
                cv::Mat createFromViewerImage(const std::string &inputFile) override;

                //! Get the maximum grayscale intensity of the colour bar in the image
                /*!
                 * \param inputFile The path to the image file
                 */
                double maxColourBarIntensityFromViewerImage(const std::string &inputFile) override;

            protected:

                //! Process the concentrations from the input file
                /*!
                 * REMARK: This method is not implemented and throws an error when called.
                 *
                 * \param fin Input file stream from which the concentrations are read
                 */
                unsigned char *processConcentrations(std::ifstream& fin) override;

                //! Check if the image generated by the viewer has the required resolution
                /*!
                 * \param image Image generated by the viewer
                 */
                bool isValidViewerImage(const cv::Mat &image) override;

            private:

                //! Create a mask inside the circle with origin at (originX, originY) and the given radius
                /*! Create a mask with 255 intensity pixels inside the circle with origin at (originX, originY) and
                 *  the given radius. All the other pixels have intensity zero.
                 *
                 * The original image is provided only for computing its size correctly.
                 *
                 * \param originX   The x coordinate for the origin
                 * \param originY   The y coordinate for the origin
                 * \param radius    The size of the radius
                 * \param image     The original image
                 */
                cv::Mat createCircularMask(unsigned int originX, unsigned int originY,
                                           unsigned int radius, const cv::Mat &image);

            private:

                // Constants
                static const std::string ERR_UNIMPLEMENTED_METHOD;

                static const int INTENSITY_MAX;

                static const int ROI_START_X;
                static const int ROI_START_Y;
                static const int ROI_RADIUS;

                static const int INPUT_IMG_WIDTH;
                static const int INPUT_IMG_HEIGHT;

                static const int COLOURBAR_MAX_X;
                static const int COLOURBAR_MAX_Y;

        };

    };

};


#endif
