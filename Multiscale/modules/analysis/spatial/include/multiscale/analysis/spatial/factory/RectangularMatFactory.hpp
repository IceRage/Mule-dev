#ifndef RECTANGULARMATFACTORY_HPP
#define RECTANGULARMATFACTORY_HPP

#include "multiscale/analysis/spatial/MatFactory.hpp"


namespace multiscale {

    namespace analysis {

        //! Class for creating a cv::Mat object considering a rectangular grid
        class RectangularMatFactory : public MatFactory {

            public:

                RectangularMatFactory();
                ~RectangularMatFactory();

                //! Create a cv::Mat object from the image file obtained from the RectangularGeometryViewer
                /*!
                 * Create the cv::Mat instance from the given image file
                 *
                 *  \param inputFile The path to the image file
                 */
                cv::Mat createFromViewerImage(const std::string &inputFile) override;

                //! Get the maximum grayscale intensity of the colour bar in the image
                /*!
                 * \param inputFile The path to the image file
                 */
                double maxColourBarIntensityFromViewerImage(const std::string &inputFile) override;

            protected:

                //! Process the concentrations from the input file
                /*!
                 * Read the concentrations from the input file and return them as an array which can be used
                 * afterwards to create a cv::Mat object from them
                 *
                 * REMARK: The constructor of cv::Mat does not copy the data. Therefore, DO NOT
                 *         deallocate it in this class.
                 *
                 * \param fin Input file stream from which the concentrations are read
                 */
                unsigned char *processConcentrations(std::ifstream& fin) override;

                //! Check if the image generated by the viewer has the required resolution
                /*!
                 * \param image Image generated by the viewer
                 */
                bool isValidViewerImage(const cv::Mat &image) override;

            private:

                // Constants
                static const std::string ERR_CONC;

                static const int ROI_START_X;
                static const int ROI_START_Y;
                static const int ROI_WIDTH;
                static const int ROI_HEIGHT;

                static const int INPUT_IMG_WIDTH;
                static const int INPUT_IMG_HEIGHT;

                static const int COLOURBAR_MAX_X;
                static const int COLOURBAR_MAX_Y;

        };

    };

};


#endif
