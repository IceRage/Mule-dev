# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

# Constants definitions
LINUX_X64_BUILDSLAVE_USERNAME="buildslave-linux-x64-user"
LINUX_X64_BUILDSLAVE_PASSWORD="buildslave-linux-x64-p@ssw0rd"
WINDOWS_X86_BUIILDSLAVE_USERNAME="buildslave-windows-x86-user"
WINDOWS_X86_BUILDSLAVE_PASSWORD="buildslave-windows-x86-p@ssw0rd"

# Define the list of slaves
c['slaves'] = []

c['slaves'].append(BuildSlave(
			LINUX_X64_BUILDSLAVE_USERNAME, 
			LINUX_X64_BUILDSLAVE_PASSWORD))

c['slaves'].append(BuildSlave(
			WINDOWS_X86_BUIILDSLAVE_USERNAME, 
			WINDOWS_X86_BUILDSLAVE_PASSWORD))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9898}}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the multsicale project.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []

c['change_source'].append(GitPoller(
        			'git@github.com:IceRage/multiscale.git',
			        workdir='gitpoller-workdir', 
				    branches=True,
			        pollinterval=600))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes. In this
# case, just kick off start a "Linux-x64" build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter

# Constants definition
LINUX_X64_BUILDERNAME="Linux-x64"
WINDOWS_X86_BUILDERNAME="Windows-x86"

c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=300,
                            builderNames=[LINUX_X64_BUILDERNAME, WINDOWS_X86_BUILDERNAME]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

# Constants definition
DEBUG_TAG = "(Debug)"
RELEASE_TAG = "(Release)"

REPOSITORY_FOLDER = "multiscale"
PROJECT_FOLDER = REPOSITORY_FOLDER + "/Multiscale"

BUILD_DEBUG_FOLDER = PROJECT_FOLDER + "/build/Debug"
BUILD_RELEASE_FOLDER = PROJECT_FOLDER + "/build/Release"

DOCS_FOLDER = PROJECT_FOLDER + "/doc"


##############################################################################
#
# 
# Linux x64
#
#
##############################################################################

# Checkout the latest version of the source code
linuxX64CheckoutStep = Git(
		repourl='git@github.com:IceRage/multiscale.git', 
		mode='incremental',
		timeout=30800,
		workdir=REPOSITORY_FOLDER,
		description="Checkout latest version of project")

# Clean the project
linuxX64DebugCleanStep = ShellCommand(
		name="make clean " + DEBUG_TAG,
		command=["make", "clean"],
		workdir=BUILD_DEBUG_FOLDER,
		description="Run make clean " + DEBUG_TAG)

linuxX64ReleaseCleanStep = ShellCommand(
		name="make clean " + RELEASE_TAG,
		command=["make", "clean"],
		workdir=BUILD_RELEASE_FOLDER,
		description="Run make clean " + RELEASE_TAG)

# Remove the previous build files
linuxX64DebugRemoveStep = ShellCommand(
		name="remove files " + DEBUG_TAG,
		command=["rm", "-rf", "*"],
		workdir=BUILD_DEBUG_FOLDER,
		description="Remove previous build files " + DEBUG_TAG)

linuxX64ReleaseRemoveStep = ShellCommand(
		name="remove files " + RELEASE_TAG,
		command=["rm", "-rf", "*"],
		workdir=BUILD_RELEASE_FOLDER,
		description="Remove previous build files " + RELEASE_TAG)

# Configure the project
linuxX64DebugConfigureStep = ShellCommand(
		name="cmake " + DEBUG_TAG,
		command=['cmake', '-G', "Unix Makefiles", '-D', 'CMAKE_BUILD_TYPE=Debug', '-D', 'CMAKE_CUSTOM_BUILD_TYPE=Package', '-D', 'CMAKE_CUSTOM_MODEL_CHECKER=Generate', '../..' ],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=True,
		description="Run cmake " + DEBUG_TAG)

linuxX64ReleaseConfigureStep = ShellCommand(
		name="cmake " + RELEASE_TAG,
		command=['cmake', '-G', "Unix Makefiles", '-D', 'CMAKE_BUILD_TYPE=Release', '-D', 'CMAKE_CUSTOM_BUILD_TYPE=Package', '-D', 'CMAKE_CUSTOM_MODEL_CHECKER=Generate', '../..' ],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=True,
		description="Run cmake " + RELEASE_TAG)

# Build the project
linuxX64DebugBuildStep = ShellCommand(
		name="make all " + DEBUG_TAG,
		command=["make", "all"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=True,
		description="Run make all " + DEBUG_TAG)

linuxX64ReleaseBuildStep = ShellCommand(
		name="make all " + RELEASE_TAG,
		command=["make", "all"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=True,
		description="Run make all " + RELEASE_TAG)

# Run the tests
linuxX64DebugRunTestsStep = ShellCommand(
		name="ctest " + DEBUG_TAG,
		command=["ctest"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Run ctest " + DEBUG_TAG)

linuxX64ReleaseRunTestsStep = ShellCommand(
		name="ctest " + RELEASE_TAG,
		command=["ctest"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Run ctest " + RELEASE_TAG)

# Build the documentation
linuxX64BuildDocumentationStep = ShellCommand(
		name="documentation",
		command=["doxygen", "Multiscale.doxyfile"],
		workdir=DOCS_FOLDER,
		haltOnFailure=False,
		description="Run doxygen to build the documentation")

# Build the package
linuxX64DebugBuildPackageStep = ShellCommand(
		name="cpack " + DEBUG_TAG,
		command=["cpack"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Run cpack to build the package " + DEBUG_TAG)

linuxX64ReleaseBuildPackageStep = ShellCommand(
		name="cpack " + RELEASE_TAG,
		command=["cpack"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Run cpack to build the package " + RELEASE_TAG)

# Remove the package
linuxX64DebugRemovePackageStep = ShellCommand(
		name="remove package " + DEBUG_TAG,
		command=["rm", "-f", "mule-*"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Remove the built package " + DEBUG_TAG)

linuxX64ReleaseRemovePackageStep = ShellCommand(
		name="remove package " + RELEASE_TAG,
		command=["rm", "-f", "mule-*"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Remove the built package " + RELEASE_TAG)

# Add the steps to the BuildFactory
linuxX64Factory = BuildFactory()

linuxX64Factory.addStep(linuxX64CheckoutStep)
linuxX64Factory.addStep(linuxX64DebugCleanStep)
linuxX64Factory.addStep(linuxX64ReleaseCleanStep)
linuxX64Factory.addStep(linuxX64DebugRemoveStep)
linuxX64Factory.addStep(linuxX64ReleaseRemoveStep)
linuxX64Factory.addStep(linuxX64DebugConfigureStep)
linuxX64Factory.addStep(linuxX64ReleaseConfigureStep)
linuxX64Factory.addStep(linuxX64DebugBuildStep)
linuxX64Factory.addStep(linuxX64ReleaseBuildStep)
linuxX64Factory.addStep(linuxX64DebugRunTestsStep)
linuxX64Factory.addStep(linuxX64ReleaseRunTestsStep)
linuxX64Factory.addStep(linuxX64BuildDocumentationStep)
linuxX64Factory.addStep(linuxX64DebugBuildPackageStep)
linuxX64Factory.addStep(linuxX64ReleaseBuildPackageStep)
linuxX64Factory.addStep(linuxX64DebugRemovePackageStep)
linuxX64Factory.addStep(linuxX64ReleaseRemovePackageStep)


##############################################################################
#
# 
# Windows x86
#
#
##############################################################################

# Checkout the latest version of the source code
windowsX86CheckoutStep = Git(
		repourl='https://github.com/IceRage/multiscale.git', 
		mode='incremental',
		timeout=30800,
		workdir=REPOSITORY_FOLDER,
		description="Checkout latest version of project")

# Clean the project
windowsX86DebugCleanStep = ShellCommand(
		name="make clean " + DEBUG_TAG,
		command=["mingw32-make", "clean"],
		workdir=BUILD_DEBUG_FOLDER,
		description="Run make clean " + DEBUG_TAG)

windowsX86ReleaseCleanStep = ShellCommand(
		name="make clean " + RELEASE_TAG,
		command=["mingw32-make", "clean"],
		workdir=BUILD_RELEASE_FOLDER,
		description="Run make clean " + RELEASE_TAG)

# Remove the previous build files
windowsX86DebugRemoveStep = ShellCommand(
		name="remove files " + DEBUG_TAG,
		command=["del", "/q", "/s", ".\*"],
		workdir=BUILD_DEBUG_FOLDER,
		description="Remove previous build files " + DEBUG_TAG)

windowsX86ReleaseRemoveStep = ShellCommand(
		name="remove files " + RELEASE_TAG,
		command=["del", "/q", "/s", ".\*"],
		workdir=BUILD_RELEASE_FOLDER,
		description="Remove previous build files " + RELEASE_TAG)

# Configure the project
windowsX86DebugConfigureStep = ShellCommand(
		name="cmake " + DEBUG_TAG,
		command=['cmake', '-G', "MinGW Makefiles", '-D', 'CMAKE_BUILD_TYPE=Debug', '-D', 'CMAKE_CUSTOM_BUILD_TYPE=Package', '-D', 'CMAKE_CUSTOM_MODEL_CHECKER=Generate', '../..' ],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=True,
		description="Run cmake " + DEBUG_TAG)

windowsX86ReleaseConfigureStep = ShellCommand(
		name="cmake " + RELEASE_TAG,
		command=['cmake', '-G', "MinGW Makefiles", '-D', 'CMAKE_BUILD_TYPE=Release', '-D', 'CMAKE_CUSTOM_BUILD_TYPE=Package', '-D', 'CMAKE_CUSTOM_MODEL_CHECKER=Generate', '../..' ],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=True,
		description="Run cmake " + RELEASE_TAG)

# Build the project
windowsX86DebugBuildStep = ShellCommand(
		name="make all " + DEBUG_TAG,
		command=["mingw32-make", "all"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=True,
		description="Run make all " + DEBUG_TAG)

windowsX86ReleaseBuildStep = ShellCommand(
		name="make all " + RELEASE_TAG,
		command=["mingw32-make", "all"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=True,
		description="Run make all " + RELEASE_TAG)

# Run the tests
windowsX86DebugRunTestsStep = ShellCommand(
		name="ctest " + DEBUG_TAG,
		command=["ctest"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Run ctest " + DEBUG_TAG)

windowsX86ReleaseRunTestsStep = ShellCommand(
		name="ctest " + RELEASE_TAG,
		command=["ctest"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Run ctest " + RELEASE_TAG)

# Build the documentation
windowsX86BuildDocumentationStep = ShellCommand(
		name="documentation",
		command=["doxygen", "Multiscale.doxyfile"],
		workdir=DOCS_FOLDER,
		haltOnFailure=False,
		description="Run doxygen to build the documentation")

# Build the package
windowsX86DebugBuildPackageStep = ShellCommand(
		name="cpack " + DEBUG_TAG,
		command=["cpack"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Run cpack to build the package " + DEBUG_TAG)

windowsX86ReleaseBuildPackageStep = ShellCommand(
		name="cpack " + RELEASE_TAG,
		command=["cpack"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Run cpack to build the package " + RELEASE_TAG)

# Remove the package
windowsX86DebugRemovePackageStep = ShellCommand(
		name="remove package " + DEBUG_TAG,
		command=["del", "/q", "mule*"],
		workdir=BUILD_DEBUG_FOLDER,
		haltOnFailure=False,
		description="Remove the built package " + DEBUG_TAG)

windowsX86ReleaseRemovePackageStep = ShellCommand(
		name="remove package " + RELEASE_TAG,
		command=["del", "/q", "mule*"],
		workdir=BUILD_RELEASE_FOLDER,
		haltOnFailure=False,
		description="Remove the built package " + RELEASE_TAG)

# Add the steps to the BuildFactory
windowsX86Factory = BuildFactory()

windowsX86Factory.addStep(windowsX86CheckoutStep)
windowsX86Factory.addStep(windowsX86DebugCleanStep)
windowsX86Factory.addStep(windowsX86ReleaseCleanStep)
windowsX86Factory.addStep(windowsX86DebugRemoveStep)
windowsX86Factory.addStep(windowsX86ReleaseRemoveStep)
windowsX86Factory.addStep(windowsX86DebugConfigureStep)
windowsX86Factory.addStep(windowsX86ReleaseConfigureStep)
windowsX86Factory.addStep(windowsX86DebugBuildStep)
windowsX86Factory.addStep(windowsX86ReleaseBuildStep)
windowsX86Factory.addStep(windowsX86DebugRunTestsStep)
windowsX86Factory.addStep(windowsX86ReleaseRunTestsStep)
windowsX86Factory.addStep(windowsX86BuildDocumentationStep)
windowsX86Factory.addStep(windowsX86DebugBuildPackageStep)
windowsX86Factory.addStep(windowsX86ReleaseBuildPackageStep)
windowsX86Factory.addStep(windowsX86DebugRemovePackageStep)
windowsX86Factory.addStep(windowsX86ReleaseRemovePackageStep)


# Create the builders configuration

from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].append(
    BuilderConfig(name=LINUX_X64_BUILDERNAME,
      slavenames=[LINUX_X64_BUILDSLAVE_USERNAME],
      factory=linuxX64Factory))

c['builders'].append(
    BuilderConfig(name=WINDOWS_X86_BUILDERNAME,
      slavenames=[WINDOWS_X86_BUIILDSLAVE_USERNAME],
      factory=windowsX86Factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.mail import MailNotifier
from buildbot.status.web import authz, auth

c['status'] = []

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("multiscale","multiscale-p@ssw0rd")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

c['status'].append(html.WebStatus(
		http_port=8010, 
		authz=authz_cfg))

c['status'].append(MailNotifier(
		fromaddr="buildslave@multiscale.org", 
		sendToInterestedUsers=False, 
		extraRecipients=["ovidiu.parvu@brunel.ac.uk"], 
		mode=('failing', 'warnings')))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Multiscale"
c['titleURL'] = "http://134.83.74.112:8010/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://134.83.74.112:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
