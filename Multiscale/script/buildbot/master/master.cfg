# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("buildslave-linux", "buildslave-p@ssw0rd")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9898}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the multsicale project.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []

c['change_source'].append(GitPoller(
        			'git@github.com:IceRage/multiscale.git',
			        workdir='gitpoller-workdir', 
				branches=True,
			        pollinterval=600))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes. In this
# case, just kick off start a "Linux-x64" build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter

c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=300,
                            builderNames=["Linux-x64"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

# Constants definition
REPOSITORY_HOME    = "multiscale/Multiscale"
REPOSITORY_RELEASE = REPOSITORY_HOME + "/build/Release"
REPOSITORY_DOCS    = REPOSITORY_HOME + "/doc"

# Check out the source code
checkoutStep = Git(
		repourl='git@github.com:IceRage/multiscale.git', 
		mode='incremental',
		timeout=10800,
		workdir="multiscale")

# Clean the project
cleanStep = ShellCommand(
		name="make clean",
		command=["make", "clean"],
		workdir=REPOSITORY_RELEASE,
		description="Run make clean")

# Configure the project
configureStep = ShellCommand(
		name="cmake",
		command=['cmake', '-G', "Unix Makefiles", '-D', 'CMAKE_BUILD_TYPE=Release', '-D', 'CMAKE_CUSTOM_BUILD_TYPE=Package', '../..' ],
		workdir=REPOSITORY_RELEASE,
		haltOnFailure=True,
		description="Run cmake")

# Build the project
buildStep = ShellCommand(
		name="make all",
		command=["make", "all"],
		workdir=REPOSITORY_RELEASE,
		haltOnFailure=True,
		description="Run make all")

# Run the tests
runTestsStep = ShellCommand(
		name="ctest",
		command=["ctest"],
		workdir=REPOSITORY_RELEASE,
		haltOnFailure=False,
		description="Run ctest")

# Build the documentation
buildDocumentationStep = ShellCommand(
		name="documentation",
		command=["doxygen Multiscale.doxyfile"],
		workdir=REPOSITORY_DOCS,
		haltOnFailure=False,
		description="Run doxygen to build the documentation")

# Build the package
buildPackageStep = ShellCommand(
		name="cpack",
		command=["cpack"],
		workdir=REPOSITORY_RELEASE,
		haltOnFailure=False,
		description="Run cpack to build the package")

# Remove the package
removePackageStep = ShellCommand(
		name="remove-package",
		command=["rm", "-f", "mule-*"],
		workdir=REPOSITORY_RELEASE,
		haltOnFailure=False,
		description="Remove the built package")

# Add the steps to the BuildFactory
factory = BuildFactory()

factory.addStep(checkoutStep)
factory.addStep(cleanStep)
factory.addStep(configureStep)
factory.addStep(buildStep)
factory.addStep(runTestsStep)
factory.addStep(buildPackageStep)
factory.addStep(removePackageStep)

# Create the builders configuration
from buildbot.config import BuilderConfig

c['builders'] = []

c['builders'].append(
    BuilderConfig(name="Linux-x64",
      slavenames=["buildslave-linux"],
      factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.mail import MailNotifier
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("multiscale","multiscale-p@ssw0rd")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)



c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(MailNotifier(fromaddr="buildslave@multiscale.org", sendToInterestedUsers=False, extraRecipients=["ovidiu.parvu@brunel.ac.uk"], mode=('failing', 'warnings')))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Multiscale"
c['titleURL'] = "http://134.83.85.75:8010/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://134.83.85.75:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
