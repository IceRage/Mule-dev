#ifndef SYMBOLTABLES_HPP
#define SYMBOLTABLES_HPP

#include "multiscale/verification/spatial-temporal/attribute/BinaryNumericMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/BinaryStatisticalMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/BinaryStatisticalQuantileMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/ChangeMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/ComparatorAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/HeterogeneousTimeseriesComponentAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/HomogeneousTimeseriesComponentAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/HomogeneousTimeseriesMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/SimilarityMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/SubsetOperationAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/TimeseriesMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/UnaryNumericMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/attribute/UnaryStatisticalMeasureAttribute.hpp"
#include "multiscale/verification/spatial-temporal/parsing/SymbolTablesAutoGenerated.hpp"

#include <boost/spirit/include/qi_symbols.hpp>


namespace multiscale {

    namespace verification {

        //! Symbol table and parser for the binary numeric measure type
        struct BinaryNumericMeasureTypeParser
            : qi::symbols<char, multiscale::verification::BinaryNumericMeasureType> {

            BinaryNumericMeasureTypeParser() {
                add
                    ("add"      , BinaryNumericMeasureType::Add)
                    ("div"      , BinaryNumericMeasureType::Div)
                    ("log"      , BinaryNumericMeasureType::Log)
                    ("mod"      , BinaryNumericMeasureType::Mod)
                    ("multiply" , BinaryNumericMeasureType::Multiply)
                    ("power"    , BinaryNumericMeasureType::Power)
                    ("subtract" , BinaryNumericMeasureType::Subtract)
                ;
            }

        };

        //! Symbol table and parser for the binary statistical measure type
        struct BinaryStatisticalMeasureTypeParser
            : qi::symbols<char, multiscale::verification::BinaryStatisticalMeasureType> {

            BinaryStatisticalMeasureTypeParser() {
                add
                    ("covar"    , BinaryStatisticalMeasureType::Covar)
                ;
            }

        };

        //! Symbol table and parser for the binary statistical quantile measure type
        struct BinaryStatisticalQuantileMeasureTypeParser
            : qi::symbols<char, multiscale::verification::BinaryStatisticalQuantileMeasureType> {

            BinaryStatisticalQuantileMeasureTypeParser() {
                add
                    ("percentile"   , BinaryStatisticalQuantileMeasureType::Percentile)
                    ("quartile"     , BinaryStatisticalQuantileMeasureType::Quartile)
                ;
            }

        };

        //! Symbol table and parser for the change measure type
        struct ChangeMeasureTypeParser
            : qi::symbols<char, multiscale::verification::ChangeMeasureType> {

            ChangeMeasureTypeParser() {
                add
                    ("d"    , ChangeMeasureType::Derivative)
                    ("r"    , ChangeMeasureType::Ratio)
                ;
            }

        };

        //! Symbol table and parser for the comparator type which does not accept the "=" symbol
        struct ComparatorNonEqualTypeParser
            : qi::symbols<char, multiscale::verification::ComparatorType> {

            ComparatorNonEqualTypeParser() {
                add
                    (">"    , ComparatorType::GreaterThan)
                    (">="   , ComparatorType::GreaterThanOrEqual)
                    ("<"    , ComparatorType::LessThan)
                    ("<="   , ComparatorType::LessThanOrEqual)
                ;
            }

        };

        //! Symbol table and parser for the comparator type
        struct ComparatorTypeParser
            : qi::symbols<char, multiscale::verification::ComparatorType> {

            ComparatorTypeParser() {
                add
                    (">"    , ComparatorType::GreaterThan)
                    (">="   , ComparatorType::GreaterThanOrEqual)
                    ("<"    , ComparatorType::LessThan)
                    ("<="   , ComparatorType::LessThanOrEqual)
                    ("="    , ComparatorType::Equal)
                ;
            }

        };

        //! Symbol table and parser for the heterogeneous timeseries component type
        struct HeterogeneousTimeseriesComponentTypeParser
            : qi::symbols<char, multiscale::verification::HeterogeneousTimeseriesComponentType> {

            HeterogeneousTimeseriesComponentTypeParser() {
                add
                    ("peak"     , HeterogeneousTimeseriesComponentType::Peak)
                    ("valley"   , HeterogeneousTimeseriesComponentType::Valley)
                ;
            }

        };

        //! Symbol table and parser for the homogeneous timeseries component type
        struct HomogeneousTimeseriesComponentTypeParser
            : qi::symbols<char, multiscale::verification::HomogeneousTimeseriesComponentType> {

            HomogeneousTimeseriesComponentTypeParser() {
                add
                    ("ascent"           , HomogeneousTimeseriesComponentType::Ascent)
                    ("descent"          , HomogeneousTimeseriesComponentType::Descent)
                    ("plateau"          , HomogeneousTimeseriesComponentType::Plateau)
                    ("uniformAscent"    , HomogeneousTimeseriesComponentType::UniformAscent)
                    ("uniformDescent"   , HomogeneousTimeseriesComponentType::UniformDescent)
                ;
            }

        };

        //! Symbol table and parser for the homogeneous timeseries measure type
        struct HomogeneousTimeseriesMeasureTypeParser
            : qi::symbols<char, multiscale::verification::HomogeneousTimeseriesMeasureType> {

            HomogeneousTimeseriesMeasureTypeParser() {
                add
                    ("timeSpan" , HomogeneousTimeseriesMeasureType::TimeSpan)
                    ("values"   , HomogeneousTimeseriesMeasureType::Values)
                ;
            }

        };

        //! Symbol table and parser for the similarity measure type
        struct SimilarityMeasureTypeParser
            : qi::symbols<char, multiscale::verification::SimilarityMeasureType> {

            SimilarityMeasureTypeParser() {
                add
                    ("opposite" , SimilarityMeasureType::Opposite)
                    ("similar"  , SimilarityMeasureType::Similar)
                ;
            }

        };

        //! Symbol table and parser for the subset operation type
        struct SubsetOperationTypeParser
            : qi::symbols<char, multiscale::verification::SubsetOperationType> {

            SubsetOperationTypeParser() {
                add
                    ("difference"   , SubsetOperationType::Difference)
                    ("intersection" , SubsetOperationType::Intersection)
                    ("union"        , SubsetOperationType::Union)
                ;
            }

        };

        //! Symbol table and parser for the timeseries measure type
        struct TimeseriesMeasureTypeParser
            : qi::symbols<char, multiscale::verification::TimeseriesMeasureType> {

            TimeseriesMeasureTypeParser() {
                add
                    ("enteringTime"     , TimeseriesMeasureType::EnteringTime)
                    ("enteringValue"    , TimeseriesMeasureType::EnteringValue)
                ;
            }

        };

        //! Symbol table and parser for the unary numeric measure type
        struct UnaryNumericMeasureTypeParser
            : qi::symbols<char, multiscale::verification::UnaryNumericMeasureType> {

            UnaryNumericMeasureTypeParser() {
                add
                    ("abs"      , UnaryNumericMeasureType::Abs)
                    ("ceil"     , UnaryNumericMeasureType::Ceil)
                    ("floor"    , UnaryNumericMeasureType::Floor)
                    ("round"    , UnaryNumericMeasureType::Round)
                    ("sign"     , UnaryNumericMeasureType::Sign)
                    ("sqrt"     , UnaryNumericMeasureType::Sqrt)
                    ("trunc"    , UnaryNumericMeasureType::Trunc)
                ;
            }

        };

        //! Symbol table and parser for the unary statistical measure type
        struct UnaryStatisticalMeasureTypeParser
            : qi::symbols<char, multiscale::verification::UnaryStatisticalMeasureType> {

            UnaryStatisticalMeasureTypeParser() {
                add
                    ("avg"      , UnaryStatisticalMeasureType::Avg)
                    ("count"    , UnaryStatisticalMeasureType::Count)
                    ("geomean"  , UnaryStatisticalMeasureType::Geomean)
                    ("harmean"  , UnaryStatisticalMeasureType::Harmean)
                    ("kurt"     , UnaryStatisticalMeasureType::Kurt)
                    ("max"      , UnaryStatisticalMeasureType::Max)
                    ("median"   , UnaryStatisticalMeasureType::Median)
                    ("min"      , UnaryStatisticalMeasureType::Min)
                    ("mode"     , UnaryStatisticalMeasureType::Mode)
                    ("product"  , UnaryStatisticalMeasureType::Product)
                    ("skew"     , UnaryStatisticalMeasureType::Skew)
                    ("stdev"    , UnaryStatisticalMeasureType::Stdev)
                    ("sum"      , UnaryStatisticalMeasureType::Sum)
                    ("var"      , UnaryStatisticalMeasureType::Var)
                ;
            }

        };

    };

};


#endif
